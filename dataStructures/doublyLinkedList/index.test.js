const DoublyLinkedList = require('./index')

describe('DoublyLinkedList', () => {
  test('it should be an object', () => {
    const list = new DoublyLinkedList()
    expect(typeof list).toBe('object')
  })
  test('it should add new values', () => {
    const list = new DoublyLinkedList()
    list.push(1)
    list.push(2)
    list.push(3)
    expect(list.head.val).toBe(1)
    expect(list.head).not.toBe(null)
    expect(list.head.next.next.prev.val).toBe(2)
    expect(list.length).toBe(3)
  })
  xtest('it should remove items from the end of list', () => {
    const list = new DoublyLinkedList()
    list.push(1)
    list.push(2)
    list.push(3)
    list.pop()
    expect(list.tail.val).toBe(2)
    expect(list.tail.next).toBe(null)
    expect(list.length).toBe(2)
  })
  xtest('it should allow deletion of first item in list', () => {
    const list = new DoublyLinkedList()
    list.push(1)
    list.push(2)
    list.push(3)
    list.shift()
    expect(list.head.val).toBe(2)
    expect(list.head.next.val).toBe(3)
    expect(list.length).toBe(2)
  })
  xtest('it should allow insertion of first item in list', () => {
    const list = new DoublyLinkedList()
    list.push(1)
    list.push(2)
    list.push(3)
    list.unshift(0)
    expect(list.head.val).toBe(0)
    expect(list.head.next.val).toBe(1)
    expect(list.length).toBe(4)
  })
  xtest('it should allow retrieving a specific index', () => {
    const list = new DoublyLinkedList()
    list.push(1)
    list.push(2)
    list.push(3)
    expect(list.get(1).val).toBe(2)
    expect(list.get(2).val).toBe(3)
    expect(list.get(-1)).toBe(null)
  })
  xtest('it should allow updating an existing node', () => {
    const list = new DoublyLinkedList()
    list.push(1)
    list.push(2)
    list.push(3)
    list.set('Hello Mother', 1)
    expect(list.get(1).val).toBe('Hello Mother')
    expect(list.get(1).next.val).toBe(3)
  })
  xtest('it should allow insertion at a specific index', () => {
    const list = new DoublyLinkedList()
    list.push(1)
    list.push(2)
    list.push(3)
    list.insert(1, 500)
    expect(list.get(1).val).toBe(500)
  })
  xtest('it should allow removal at a specific index', () => {
    const list = new DoublyLinkedList()
    list.push(1)
    list.push(2)
    list.push(3)
    list.remove(1)
    expect(list.get(1).val).toBe(3)
  })
  xtest('it should allow reversal of the entire list', () => {
    const list = new DoublyLinkedList()
    list.push(1)
    list.push(2)
    list.push(3)
    list.reverse()
    expect(list.get(0).val).toBe(3)
    expect(list.get(1).val).toBe(2)
    expect(list.get(2).val).toBe(1)
  })
})
